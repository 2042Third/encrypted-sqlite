# Clean build (recommended)
rm -rf build && mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(pwd)/../install
cmake --build . --target install

#windows version
cmake -G "MinGW Makefiles" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="C:\Users\18604\Desktop\net\minimal-desktop-pdm\pdm-v3-wails3\pdm\encrypted-sqlite\install"
cmake --build . --target install

set CGO_ENABLED=1

# with rpath
clang++ main.cpp \
-I./src \
-I./src/db \
-I./src/crypto \
-I./lib \
-I./lib/cryptoSQLite \
-I./lib/cryptoSQLite/external/securememory/include \
-I./lib/pdm-crypt-module/src/lib \
-I./lib/cryptoSQLite/include \
-I./build \
-L./build \
-Wl,-rpath,./build \
-Wl,-rpath,./build/lib/cryptoSQLite \
./build/libencrypted_sqlite.dylib \
./build/libencrypted_sqlite.0.1.dylib \
./build/libencrypted_sqlite.0.dylib \
./build/lib/cryptoSQLite/libcryptosqlite.dylib \
-std=c++20 \
-o test_program

# Build c program
# 1: build c++ wrapper
clang++ -c wrapper.cpp \
-I./ \
-I./src \
-I./src/db \
-I./src/crypto \
-I./lib \
-I./lib/cryptoSQLite \
-I./lib/cryptoSQLite/external/securememory/include \
-I./lib/pdm-crypt-module/src/lib \
-I./lib/cryptoSQLite/include \
-I./build \
-L./build \
-Wl,-rpath,./build \
-Wl,-rpath,./build/lib/cryptoSQLite \
./build/libencrypted_sqlite.dylib \
./build/libencrypted_sqlite.0.1.dylib \
./build/libencrypted_sqlite.0.dylib \
./build/lib/cryptoSQLite/libcryptosqlite.dylib \
-std=c++20 \
-o wrapper.o -g

# 2: build c program
clang -c main.c \
-I./src \
-I./src/db \
-I./src/crypto \
-I./lib \
-I./lib/cryptoSQLite \
-I./lib/cryptoSQLite/external/securememory/include \
-I./lib/pdm-crypt-module/src/lib \
-I./lib/cryptoSQLite/include \
-I./build \
-o main.o

# 3: link c program with c++ wrapper
clang++ main.o wrapper.o \
-L./build \
-Wl,-rpath,./build \
-Wl,-rpath,./build/lib/cryptoSQLite \
./build/libencrypted_sqlite.dylib \
./build/libencrypted_sqlite.0.1.dylib \
./build/libencrypted_sqlite.0.dylib \
./build/lib/cryptoSQLite/libcryptosqlite.dylib \
-o c_test_program


# Build the go library
clang++ -shared -o libwrapper.dylib wrapper.cpp \
-I./ \
-I./src \
-I./src/db \
-I./src/crypto \
-I./lib \
-I./lib/cryptoSQLite \
-I./lib/cryptoSQLite/external/securememory/include \
-I./lib/pdm-crypt-module/src/lib \
-I./lib/cryptoSQLite/include \
-L./build \
-L./build/lib/cryptoSQLite \
-L./build/lib/cryptoSQLite/external/securememory \
-Wl,-rpath,@loader_path/../Frameworks \
-Wl,-install_name,@rpath/libwrapper.dylib \
-lencrypted_sqlite \
-lcryptosqlite \
-std=c++20
